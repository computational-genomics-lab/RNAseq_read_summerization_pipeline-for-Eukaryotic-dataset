configfile: "eu_config.yaml"

# Load paths from config.yaml
WORKDIR    = config["workdir"]
REFERENCE  = config["reference"]     # fasta
ANNOTATION = config["annotation"]    # gff or gtf
ADAPTERS   = config["adapters"]
SAMPLES    = config["samples"]       # list of sample prefixes
READ_COUNT = f"{WORKDIR}/{config['output']['counts']}"

rule all:
    input:
        READ_COUNT

# Quality trimming with BBDuk
rule clean:
    input:
        rawfile1 = lambda wc: f"{WORKDIR}/{wc.sample}R1.fastq",
        rawfile2 = lambda wc: f"{WORKDIR}/{wc.sample}R2.fastq"
    output:
        clean1 = f"{WORKDIR}/cln{{sample}}R1.fastq",
        clean2 = f"{WORKDIR}/cln{{sample}}R2.fastq"
    params:
        adapters = ADAPTERS
    shell:
        "bbduk.sh in1={input.rawfile1} in2={input.rawfile2} "
        "out1={output.clean1} out2={output.clean2} "
        "ftl=9 minlength=75 ref={params.adapters} "
        "ktrim=r k=23 mink=11 hdist=1 tpe tbo"

# STAR genome index
rule star_index:
    input:
        ref = REFERENCE,
        gtf = ANNOTATION
    output:
        directory("star_index")
    shell:
        "STAR --runThreadN 8 "
        "--runMode genomeGenerate "
        "--genomeDir {output} "
        "--genomeFastaFiles {input.ref} "
        "--sjdbGTFfile {input.gtf} "
        "--sjdbOverhang 100"

# Alignment with STAR
rule star_align:
    input:
        idx = "star_index",
        fq1 = f"{WORKDIR}/cln{{sample}}R1.fastq",
        fq2 = f"{WORKDIR}/cln{{sample}}R2.fastq"
    output:
        bam = f"{WORKDIR}/cln{{sample}}.bam"
    params:
        idx = "star_index"
    shell:
        "STAR --runThreadN 8 "
        "--genomeDir {params.idx} "
        "--readFilesIn {input.fq1} {input.fq2} "
        "--outSAMtype BAM Unsorted "
        "--outFileNamePrefix {wildcards.sample}_ "
        "&& mv {wildcards.sample}_Aligned.out.bam {output.bam}"

# Sorting BAM
rule sorting:
    input:
        f"{WORKDIR}/cln{{sample}}.bam"
    output:
        f"{WORKDIR}/cln{{sample}}sorted.bam"
    shell:
        "samtools sort {input} -o {output}"

# FeatureCounts for all samples
rule featurecounts:
    input:
        an = ANNOTATION,
        sort = expand(f"{WORKDIR}/cln{{sample}}sorted.bam", sample=SAMPLES)
    output:
        READ_COUNT
#    shell:
#        "featureCounts -p -T 4 -t exon -g ID "
#        "-a {input.an} {input.sort} -o {output}"
    params:
        feature_type = config["featurecounts"]["feature_type"],
        attribute = config["featurecounts"]["attribute"],
        format = config["featurecounts"]["format"],
        paired = "-p" if config["featurecounts"]["paired"] else ""
    shell:
        "featureCounts {params.paired} -T 4 "
        "-t {params.feature_type} -g {params.attribute} -F {params.format} "
        "-a {input.an} {input.sort} -o {output}"
